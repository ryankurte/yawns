// Protocol definitions for communication with OWNS

syntax = "proto3";

// Common RF information message
message RFInfo {
    string band   = 1;      // Band must match a named band in the ONS config
    int32 channel = 2;      // Channel number
}

// RF Transceiver State
enum RFState {
    NONE            = 0;    // Mock state to ensure state is always included
    IDLE            = 1;    // Idle (awake)
    RECEIVE         = 2;    // Prepared to receive
    RECEIVING       = 3;    // Currently receiving
    TRANSMITTING    = 4;    // Currently transmitting
    SLEEP           = 5;    // Sleeping
}

// Sent on ONS first connection
message Register {
    string address = 1;     // Address is the network address of the device
}

// Sent on ONS connector close
message Deregister {
    string address = 1;     // Address is the network address of the device
}

// Packet to be sent
message Packet {
    RFInfo info     = 1;    // RF information
    bytes data      = 2;    // Data payload   
}

// Indicates that a message send has completed
message SendComplete {
    RFInfo info = 1;        // Receive channel information
}

// Set transceiver state
message StateSet {
    RFInfo info = 1;       // Radio information
    RFState state = 2;     // Transceiver state
}

// Request transceiver state
message StateReq {
    RFInfo info = 1;        // Radio information
}

// Response to transceiver state request
message StateResp {
    RFInfo info = 1;        // Radio information
    RFState state = 2;      // Transceiver state
}

// Request RSSI for a provided channel
message RSSIReq {
    RFInfo info = 1;        // Receive channel information
}

// RSSI value response
message RSSIResp {
    RFInfo info = 1;        // Receive channel information
    float rssi = 2;         // RSSI value
}

// Event used to log events on a node back to the ONS server
message Event {
    string data = 1;        // Event data
}

// FieldReq requests a field value
message FieldReq {
    string name = 1;
}

// FieldResp is a field value response
message FieldResp {
    string name = 1;
    string data = 2;
}

message FieldSet {
    string name = 1;
    string data = 2;
}

// Base / common message
// This is the on-the-wire communication type
message Base {
    oneof message {
        Register        register        = 1;
        Deregister      deregister      = 2;
        Packet          packet          = 3;
        SendComplete    sendComplete    = 4;
        StateSet        stateSet        = 5;
        StateReq        stateReq        = 6;
        StateResp       stateResp       = 7;
        Event           event           = 8;
        RSSIReq         rssiReq         = 9;
        RSSIResp        rssiResp        = 10;
    }
}